require 'rails_helper'

# This spec was generated by rspec-rails when you ran the scaffold generator.
# It demonstrates how one might use RSpec to specify the controller code that
# was generated by Rails when you ran the scaffold generator.
#
# It assumes that the implementation code is generated by the rails scaffold
# generator.  If you are using any extension libraries to generate different
# controller code, this generated spec may or may not pass.
#
# It only uses APIs available in rails and/or rspec-rails.  There are a number
# of tools you can use to make these specs even more expressive, but we're
# sticking to rails and rspec-rails APIs to keep things simple and stable.
#
# Compared to earlier versions of this generator, there is very limited use of
# stubs and message expectations in this spec.  Stubs are only used when there
# is no simpler way to get a handle on the object needed for the example.
# Message expectations are only used when there is no simpler way to specify
# that an instance is receiving a specific message.

RSpec.describe GroupsController, :type => :controller do
  before do
    mock_logged_in_user
  end

  # This should return the minimal set of attributes required to create a valid
  # Group. As you add validations to Group, be sure to
  # adjust the attributes here as well.
  let(:valid_attributes) {
    attributes_for(:group)
  }

  let(:invalid_attributes) {
    {name: ''}
  }

  # This should return the minimal set of values that should be in the session
  # in order to pass any filters (e.g. authentication) defined in
  # GroupsController. Be sure to keep this updated too.
  let(:valid_session) { {} }

  let(:person) { create(:person) }

  describe "GET index" do
    subject { get :index, {}, valid_session }

    it "without any groups, it redirects to the new group page" do
      expect(subject).to redirect_to(new_group_path)
    end

    it "with a department, it redirects to the departmental page" do
      department = create(:group, parent: nil)
      expect(subject).to redirect_to(group_path(department))
    end

    it "with a department and a team, it still redirects to the departmental page" do
      team = create(:group)
      department = create(:group)
      team.update_attribute(:parent, department)
      expect(subject).to redirect_to(group_path(department))
    end
  end

  describe "GET show" do
    it "assigns the requested group as @group" do
      group = create(:group, valid_attributes)
      get :show, {:id => group.to_param}, valid_session
      expect(assigns(:group)).to eq(group)
    end
  end

  describe "GET new" do
    it "assigns a new group as @group" do
      get :new, {}, valid_session
      expect(assigns(:group)).to be_a_new(Group)
    end

    it "assigns a membership object" do
      get :new, {}, valid_session
      expect(assigns(:group).memberships.length).to eql(1)
    end

    it "sets people" do
      get :new, {}, valid_session
      expect(assigns(:people)).to include(person)
    end
  end

  describe "GET edit" do
    let(:group) { create(:group, valid_attributes) }

    it "assigns the requested group as @group" do
      get :edit, {:id => group.to_param}, valid_session
      expect(assigns(:group)).to eql(group)
    end

    it "sets people" do
      get :edit, {:id => group.to_param}, valid_session
      expect(assigns(:people)).to include(person)
    end

    it "sets people and excludes the already assigned person" do
      group.memberships.create(person: person)
      get :edit, {:id => group.to_param}, valid_session
      expect(assigns(:people)).not_to include(person)
    end
  end

  describe "POST create" do
    describe "with valid params" do
      it "creates a new Group" do
        expect {
          post :create, {:group => valid_attributes}, valid_session
        }.to change(Group, :count).by(1)
      end

      it "assigns a newly created group as @group" do
        post :create, {:group => valid_attributes}, valid_session
        expect(assigns(:group)).to be_a(Group)
        expect(assigns(:group)).to be_persisted
      end

      it "redirects to the created group" do
        post :create, {:group => valid_attributes}, valid_session
        expect(response).to redirect_to(Group.last)
      end
    end

    describe "with invalid params" do
      it "assigns a newly created but unsaved group as @group" do
        post :create, {:group => invalid_attributes}, valid_session
        expect(assigns(:group)).to be_a_new(Group)
      end

      it "re-renders the 'new' template" do
        post :create, {:group => invalid_attributes}, valid_session
        expect(response).to render_template("new")
      end

      it "sets people" do
        post :create, {:group => invalid_attributes}, valid_session
        expect(assigns(:people)).to include(person)
      end
    end
  end

  describe "PUT update" do
    describe "with valid params" do
      let(:new_attributes) {
        attributes_for(:group)
      }

      it "updates the requested group" do
        group = create(:group, valid_attributes)
        put :update, {:id => group.to_param, :group => new_attributes}, valid_session
        group.reload
        expect(group.name).to eql(new_attributes[:name])
      end

      it "assigns the requested group as @group" do
        group = create(:group, valid_attributes)
        put :update, {:id => group.to_param, :group => valid_attributes}, valid_session
        expect(assigns(:group)).to eq(group)
      end

      it "redirects to the group" do
        group = create(:group, valid_attributes)
        put :update, {:id => group.to_param, :group => valid_attributes}, valid_session
        expect(response).to redirect_to(group)
      end
    end

    describe "with invalid params" do
      let(:group) { create(:group, valid_attributes) }

      it "assigns the group as @group" do
        put :update, {:id => group.to_param, :group => invalid_attributes}, valid_session
        expect(assigns(:group)).to eq(group)
      end

      it "re-renders the 'edit' template" do
        put :update, {:id => group.to_param, :group => invalid_attributes}, valid_session
        expect(response).to render_template("edit")
      end

      it "sets people" do
        get :new, {:id => group.to_param, :group => invalid_attributes}, valid_session
        expect(assigns(:people)).to include(person)
      end
    end
  end

  describe "DELETE destroy" do
    it "destroys the requested group" do
      group = create(:group, valid_attributes)
      expect {
        delete :destroy, {:id => group.to_param}, valid_session
      }.to change(Group, :count).by(-1)
    end

    it "redirects to the groups list" do
      group = create(:group, valid_attributes)
      delete :destroy, {:id => group.to_param}, valid_session
      expect(response).to redirect_to(groups_url)
    end
  end

  describe 'GET add_membership' do
    context 'with a new group' do
      it 'renders add_membership template' do
        get :add_membership
        expect(response).to render_template('add_membership')
      end

      it 'sets people' do
        get :add_membership
        expect(assigns(:people)).to include(person)
      end
    end

    context 'with an existing group' do
      let(:group) { create(:group) }

      it 'renders add_membership template' do
        get :add_membership, id: group
        expect(response).to render_template('add_membership')
      end

      it 'sets people' do
        get :add_membership, id: group
        expect(assigns(:people)).to include(person)
      end

      it "sets people and excludes the already assigned person" do
        group.memberships.create(person: person)
        get :add_membership, id: group
        expect(assigns(:people)).not_to include(person)
      end
    end
  end
end
