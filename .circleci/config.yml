version: 2.1

orbs:
  slack: circleci/slack@3.4.2

references:
  defaults: &defaults
    working_directory: ~/peoplefinder
    resource_class: small

# Sets up the docker images and environment variables that we use
  test_container_config: &test_container_config
    docker:
      - image: circleci/ruby:2.5.1-node-browsers-legacy
        environment:
          RAILS_ENV: test
          RACK_ENV: test
          PG_HOST: 127.0.0.1
          PG_PASSWORD: ""
          PG_USER: postgres
          PGUSER: postgres
          PGHOST: 127.0.0.1
          POSTGRES_DB: peoplefinder_test

      - image: circleci/postgres:9.5-alpine
        environment:
          PG_PASSWORD: ""
          PG_USER: postgres
          POSTGRES_DB: peoplefinder_test-questions_test
          POSTGRES_USER: postgres
          PGUSER: postgres

      - image: bitnami/elasticsearch:6.8.6-r1
        environment:
          - cluster.name: es-test-cluster
          - xpack.security.enabled: false
          - transport.host: localhost
          - network.host: 127.0.0.1
          - http.port: 9200
          - discovery.type: single-node

  deploy_container_config: &deploy_container_config
    docker:
      - image: ${ECR_ENDPOINT}/cloud-platform/tools:circleci


# These are defining the steps which are used below in the jobs

  install_expect: &install_expect
    run:
      name: Install Expect
      command: |
        apk add \
          --no-cache \
          --no-progress \
          expect

  install_gpg: &install_gpg
    run:
      name: Install GPG
      command: |
        apk add \
          --no-cache \
          --no-progress \
          gnupg

  create_gpg_key_file: &create_gpg_key_file
    run:
      name: Create GPG Key file from Environment variable
      command: |
        echo -e ${GPG_PRIVATE_KEY} > PRIVATE_GPG_KEY.asc

  configure_gpg: &configure_gpg
    run:
      name: Configure GPG
      command: |
        gpg --import --batch --allow-secret-key-import PRIVATE_GPG_KEY.asc

  delete_gpg_key_file: &delete_gpg_key_file
    run:
        name: Delete GPG Key file after import
        command: Â¬
          rm PRIVATE_GPG_KEY.asc

  decrypt_secrets: &decrypt_secrets
    run:
      name: Decrypt secrets file
      command: |
        gpgconf --kill gpg-agent
        gpg-agent --daemon --allow-preset-passphrase
        /usr/libexec/gpg-preset-passphrase --preset --passphrase $GPG_PASSPHRASE $GPG_KEY_KEYGRIP_ID
        expect -c "spawn gpg --edit-key $GPG_KEY_ID trust quit; send \"5\ry\r\"; expect eof"
        git-crypt unlock

  install_bundler: &install_bundler
    run:
      name: Install bundler
      command: |
        gem install bundler -v 1.17.1

  check_bundler_version: &check_bundler_version
    run:
      name: Check the installed version of bundler
      command: |
        bundle -v

  restore_cache: &restore_cache
    restore_cache:
      keys:
        - peoplefinder-{{ checksum "Gemfile.lock" }}
        # fallback to using the latest cache if no exact match is found
        - peoplefinder-

  install_dependencies: &install_dependencies
    run:
      name: Install dependencies
      command: |
        if [ "${CIRCLE_NODE_INDEX}" == "0" ]; then
          bundle check --path vendor/bundle || bundle install --path vendor/bundle && bundle clean
        fi

  save_cache: &save_cache
    save_cache:
      key: peoplefinder-{{ checksum "Gemfile.lock" }}
      paths:
        - vendor/bundle

  wait_for_db: &wait_for_db
    run:
      name: Wait for DB
      command: dockerize -wait tcp://localhost:5432 -timeout 1m

  set_up_the_database: &set_up_the_database
    run:
      name: Set up the database
      command: |
        bundle exec rake db:setup

  rubocop: &rubocop
    run:
      name: Run rubocop
      command: bundle exec rubocop

  run_unit_and_feature_tests: &run_unit_and_feature_tests
    run:
      name: Run unit and feature tests
      command: |
        SKIP_SIMPLECOV=true bundle exec rspec

  set_up_aws_cli: &set_up_aws_cli
    run:
      # this is needed to get a token from the cloud platform to use kubernetes
      name: Set up AWS CLI
      command: |
        sudo apt-get update
        sudo apt-get --assume-yes install python3-pip
        sudo pip3 install awscli

  configure_aws_profile: &configure_aws_profile
    run:
      name: Configure AWS CLI
      command: |
        aws configure set aws_access_key_id ${AWS_ACCESS_KEY_ID} --profile ecr-live-1-peoplefinder
        aws configure set aws_secret_access_key ${AWS_SECRET_ACCESS_KEY} --profile ecr-live-1-peoplefinder
        aws configure set default.region ${AWS_DEFAULT_REGION} --profile ecr-live-1-peoplefinder

  build_and_push_docker_image: &build_and_push_docker_image
    run:
      name: Build docker image
      command: |
        . build.sh circleci
        mkdir -p workspace
        echo $BUILD_TAG > workspace/build_tag

  deploy_to_dev: &deploy_to_dev
    run:
      name: Deploy to Development environment
      command: |
        setup-kube-auth
        kubectl config use-context development
        build_tag=`cat /tmp/workspace/build_tag`
        ./deploy.sh $build_tag development circleci
        echo "export BUILD_TAG=${build_tag}" >> $BASH_ENV
        source $BASH_ENV

  deploy_to_demo: &deploy_to_demo
    run:
      name: Deploy to Demo environment
      command: |
        setup-kube-auth
        kubectl config use-context demo
        build_tag=`cat /tmp/workspace/build_tag`
        ./deploy.sh $build_tag demo circleci
        echo "export BUILD_TAG=${build_tag}" >> $BASH_ENV
        source $BASH_ENV

  deploy_to_staging: &deploy_to_staging
    run:
      name: Deploy to Staging environment
      command: |
        setup-kube-auth
        kubectl config use-context staging
        build_tag=`cat /tmp/workspace/build_tag`
        ./deploy.sh $build_tag staging circleci
        echo "export BUILD_TAG=${build_tag}" >> $BASH_ENV
        source $BASH_ENV

  deploy_to_production: &deploy_to_production
    run:
      name: Deploy to production environment
      command: |
        setup-kube-auth
        kubectl config use-context production
        build_tag=`cat /tmp/workspace/build_tag`
        ./deploy.sh $build_tag production circleci
        echo "export BUILD_TAG=${build_tag}" >> $BASH_ENV
        source $BASH_ENV

jobs:

  build_and_test:
    <<: *test_container_config
    resource_class: medium
    working_directory: ~/peoplefinder
    steps:
      - checkout
      - *restore_cache
      - *install_bundler
      - *check_bundler_version
      - *install_dependencies
      - *save_cache
      - *wait_for_db
      - *set_up_the_database
      - *rubocop
      - *run_unit_and_feature_tests

  build_branch_and_push_to_ecr:
    <<: *deploy_container_config
    <<: *defaults
    steps:
      - checkout
      - attach_workspace:
          at: /tmp/workspace
      - setup_remote_docker
      - *configure_aws_profile
      - *build_and_push_docker_image
      - persist_to_workspace:
          root: workspace
          paths:
            - build_tag

  build_master_and_push_to_ecr:
    <<: *deploy_container_config
    <<: *defaults
    steps:
      - checkout
      - attach_workspace:
          at: /tmp/workspace
      - setup_remote_docker:
          docker_layer_caching: true
      - *configure_aws_profile
      - *build_and_push_docker_image
      - persist_to_workspace:
          root: workspace
          paths:
            - build_tag

  dev_deployment_tasks: &do_dev_deployment_tasks
    <<: *deploy_container_config
    <<: *defaults
    steps:
      - checkout
      - attach_workspace:
          at: /tmp/workspace
      - *install_gpg
      - *install_expect
      - *create_gpg_key_file
      - *configure_gpg
      - *decrypt_secrets
      - *deploy_to_dev
      - slack/notify:
          color: '#1d990c'
          message: "${CIRCLE_USERNAME} deployed *${BUILD_TAG}* to *Development*"
          webhook: ${SLACK_WEBHOOK}

  deploy_branch_to_dev: *do_dev_deployment_tasks
  deploy_master_to_dev: *do_dev_deployment_tasks

  demo_deployment_tasks: &do_demo_deployment_tasks
    <<: *deploy_container_config
    <<: *defaults
    steps:
      - checkout
      - attach_workspace:
          at: /tmp/workspace
      - *install_gpg
      - *install_expect
      - *create_gpg_key_file
      - *configure_gpg
      - *decrypt_secrets
      - *deploy_to_staging
      - slack/notify:
          color: '#1d990c'
          message: "${CIRCLE_USERNAME} deployed *${BUILD_TAG}* to *Demo*"
          webhook: ${SLACK_WEBHOOK}

  deploy_branch_to_demo: *do_demo_deployment_tasks
  deploy_master_to_demo: *do_demo_deployment_tasks

  staging_deployment_tasks: &do_staging_deployment_tasks
    <<: *deploy_container_config
    <<: *defaults
    steps:
      - checkout
      - attach_workspace:
          at: /tmp/workspace
      - *install_gpg
      - *install_expect
      - *create_gpg_key_file
      - *configure_gpg
      - *decrypt_secrets
      - *deploy_to_staging
      - slack/notify:
          color: '#1d990c'
          message: "${CIRCLE_USERNAME} deployed *${BUILD_TAG}* to *Staging*"
          webhook: ${SLACK_WEBHOOK}

  deploy_branch_to_staging: *do_staging_deployment_tasks
  deploy_master_to_staging: *do_staging_deployment_tasks

  deploy_master_to_production:
    <<: *deploy_container_config
    <<: *defaults
    steps:
      - checkout
      - attach_workspace:
          at: /tmp/workspace
      - *install_gpg
      - *install_expect
      - *create_gpg_key_file
      - *configure_gpg
      - *decrypt_secrets
      - *deploy_to_production
      - slack/notify:
          color: '#1d990c'
          mentions: 'staff-tools-team'
          message: "${CIRCLE_USERNAME} deployed *${BUILD_TAG}* to *Production*"
          webhook: ${SLACK_WEBHOOK_SS_CIRCLECI}
      - slack/notify:
          color: '#1d990c'
          message: "${CIRCLE_USERNAME} deployed *${BUILD_TAG}* to *Production*"
          webhook: ${SLACK_WEBHOOK}

workflows:
  version: 2

  build_and_deploy_master:
    jobs:
      - build_and_test:
          filters:
            branches:
              only: master
      - build_master_and_push_to_ecr:
          requires:
            - build_and_test
      - deploy_master_to_dev:
          requires:
            - build_master_and_push_to_ecr
      - deploy_master_to_demo_approval:
          type: approval
          requires:
            - build_master_and_push_to_ecr      
      - deploy_master_to_demo:
          requires:
            - deploy_master_to_demo_approval           
      - deploy_master_to_staging_approval:
          type: approval
          requires:
            - deploy_master_to_dev
      - deploy_master_to_staging:
          requires:
            - deploy_master_to_staging_approval
      - deploy_master_to_production_approval:
          type: approval
          requires:
            - deploy_master_to_staging
      - deploy_master_to_production:
          requires:
            - deploy_master_to_production_approval

  build_and_deploy_branch:
    jobs:
      - build_and_test:
          filters:
            branches:
              ignore: master
      - build_branch_and_push_to_ecr_approval:
          type: approval
          requires:
            - build_and_test
      - build_branch_and_push_to_ecr:
          requires:
            - build_branch_and_push_to_ecr_approval
      - deploy_branch_to_dev_approval:
          type: approval
          requires:
            - build_branch_and_push_to_ecr
      - deploy_branch_to_dev:
          requires:
            - deploy_branch_to_dev_approval
      - deploy_branch_to_demo_approval:
          type: approval
          requires:
            - build_branch_and_push_to_ecr
      - deploy_branch_to_demo:
          requires:
            - deploy_branch_to_demo_approval
      - deploy_branch_to_staging_approval:
          type: approval
          requires:
            - build_branch_and_push_to_ecr
      - deploy_branch_to_staging:
          requires:
            - deploy_branch_to_staging_approval
